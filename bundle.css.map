{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../src/index.svelte",
    "../../node_modules/fa-svelte/src/Icon.html",
    "../../src/EmojiDetail.svelte",
    "../../src/EmojiList.svelte",
    "../../node_modules/svelte-tabs/src/Tab.svelte",
    "../../node_modules/svelte-tabs/src/TabList.svelte",
    "../../node_modules/svelte-tabs/src/TabPanel.svelte",
    "../../src/Emoji.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount, tick } from 'svelte';\n\n  import { faBuilding, faFlag, faLightbulb, faSmile } from '@fortawesome/free-regular-svg-icons';\n  import { faCat, faCoffee, faFutbol, faMusic } from '@fortawesome/free-solid-svg-icons';\n  import Icon from 'fa-svelte';\n  import Popper from 'popper.js';\n\n  import ClickOutside from 'svelte-click-outside';\n  import { Tabs, Tab, TabList, TabPanel } from 'svelte-tabs';\n\n  import EmojiDetail from './EmojiDetail.svelte';\n  import EmojiList from './EmojiList.svelte';\n\n  import emojiData from './data/emoji.js';\n\n  const smileIcon = faSmile;\n\n  let triggerButtonEl;\n  let pickerEl;\n  let popper;\n\n  let pickerVisible = false;\n\n  let currentEmoji;\n\n  const emojiCategories = {};\n  emojiData.forEach(emoji => {\n    let categoryList = emojiCategories[emoji.category];\n    if (!categoryList) {\n      categoryList = emojiCategories[emoji.category] = [];\n    }\n\n    categoryList.push(emoji);\n  });\n\n  console.log(emojiCategories);\n\n  const categoryOrder = [\n    'Smileys & People',\n    'Animals & Nature',\n    'Food & Drink',\n    'Activities',\n    'Travel & Places',\n    'Objects',\n    'Symbols',\n    'Flags'\n  ];\n\n  const categoryIcons = {\n    'Smileys & People': faSmile,\n    'Animals & Nature': faCat,\n    'Food & Drink': faCoffee,\n    'Activities': faFutbol,\n    'Travel & Places': faBuilding,\n    'Objects': faLightbulb,\n    'Symbols': faMusic,\n    'Flags': faFlag\n  };\n\n  function onClickOutside(event) {\n    const buttonParent = event.target.closest('.emoji-picker__trigger');\n    const pickerParent = event.target.closest('.emoji-picker');\n\n    if (!buttonParent && !pickerParent) {\n      pickerVisible = false;\n    }\n  }\n\n  function hidePicker() {\n    pickerVisible = false;\n  }\n\n  async function togglePicker() {\n    pickerVisible = !pickerVisible;\n\n    if (pickerVisible) {\n      await tick();\n      popper = new Popper(triggerButtonEl, pickerEl, {\n        placement: 'right'\n      });\n    } else {\n      popper.destroy();\n    }\n  }\n\n  function showEmojiDetails(event) {\n    currentEmoji = event.detail;\n  }\n</script>\n\n<style>\n  .svelte-emoji-picker {\n    background: #FFFFFF;\n    border: 1px solid #CCCCCC;\n    border-radius: 5px;\n    width: 22rem;\n    margin: 0 0.5em;\n    box-shadow: 0px 0px 3px 1px #CCCCCC;\n  }\n\n  .svelte-emoji-picker__trigger {\n    cursor: pointer;\n  }\n\n  .svelte-emoji-picker__emoji-tabs {\n    padding: 0.25em;\n  }\n\n  :global(.svelte-emoji-picker__emoji-tabs .svelte-tabs ul.svelte-tabs__tab-list) {\n    display: flex;\n  }\n\n  :global(.svelte-emoji-picker__emoji-tabs .svelte-tabs li.svelte-tabs__tab) {\n    flex-grow: 1;\n  }\n</style>\n\n<button class=\"svelte-emoji-picker__trigger\" bind:this={triggerButtonEl} on:click={togglePicker}>\n  <Icon icon={smileIcon} />\n</button>\n\n{#if pickerVisible}\n  <ClickOutside on:clickoutside={hidePicker} exclude={[triggerButtonEl]}>\n    <div class=\"svelte-emoji-picker\" bind:this={pickerEl}>\n      <div class=\"svelte-emoji-picker__emoji-tabs\">\n        <Tabs> \n          <TabList>\n            {#each categoryOrder as category}\n              <Tab><Icon icon={categoryIcons[category]} /></Tab>\n            {/each}\n          </TabList>\n\n          {#each categoryOrder as category}\n            <TabPanel>\n              <EmojiList name={category} emojis={emojiCategories[category]} on:emojihover={showEmojiDetails} on:emojiclick />\n            </TabPanel>\n          {/each}\n        </Tabs>\n      </div>\n\n      <EmojiDetail emoji={currentEmoji} />\n    </div>\n  </ClickOutside>\n{/if}\n",
    "<svg\r\n  aria-hidden=\"true\"\r\n  class=\"{classes}\"\r\n  role=\"img\"\r\n  xmlns=\"http://www.w3.org/2000/svg\"\r\n  viewBox=\"{viewBox}\"\r\n>\r\n  <path fill=\"currentColor\" d=\"{path}\" />\r\n</svg>\r\n<script>\r\n  export let icon;\r\n\r\n  let path = [];\r\n  let classes = \"\";\r\n  let viewBox = \"\";\r\n\r\n  $: viewBox = \"0 0 \" + icon.icon[0] + \" \" + icon.icon[1];\r\n\r\n  $: classes = \"fa-svelte \" + ($$props.class ? $$props.class : \"\");\r\n\r\n  $: path = icon.icon[4];\r\n</script>\r\n\r\n<style>\r\n  .fa-svelte {\r\n    width: 1em;\r\n    height: 1em;\r\n    overflow: visible;\r\n    display: inline-block;\r\n  }\r\n</style>",
    "<script>\n  export let emoji;\n</script>\n\n<style>\n  .svelte-emoji-picker__emoji-detail {\n    border-top: 1px solid #CCCCCC;\n    padding: 0.25em;\n    font-size: 0.8em;\n    font-weight: bold;\n    height: 2em;\n    line-height: 2em;\n    text-align: center;\n  }\n</style>\n\n<div class=\"svelte-emoji-picker__emoji-detail\">\n  {#if emoji}\n    {emoji.name}\n  {:else}\n    &nbsp;\n  {/if}\n</div>",
    "<script>\n  import Emoji from './Emoji.svelte';\n\n  export let name;\n  export let emojis;\n</script>\n\n<style>\n  h3 {\n    margin: 0;\n    font-size: 0.9em;\n    color: #333333;\n  }\n\n  .svelte-emoji-picker__emoji-list {\n    height: 10em;\n    overflow: scroll;\n  }\n</style>\n\n<h3>{name}</h3>\n\n<div class=\"svelte-emoji-picker__emoji-list\">\n  {#each emojis as emoji}\n    <Emoji emoji={emoji} on:emojihover on:emojiclick />\n  {/each}\n</div>",
    "<script>\n  import { getContext, onMount, tick } from 'svelte';\n\n  import getId from './id';\n  import { TABS } from './Tabs.svelte';\n\n  let tabEl;\n\n  const tab = {\n    id: getId()\n  };\n  const { registerTab, registerTabElement, selectTab, selectedTab, controls } = getContext(TABS);\n\n  let isSelected;\n  $: isSelected = $selectedTab === tab;\n\n  registerTab(tab);\n\n  onMount(async () => {\n    await tick();\n    registerTabElement(tabEl);\n  });\n</script>\n\n<style>\n\t.svelte-tabs__tab {\n\t\tborder: none;\n\t\tborder-bottom: 2px solid transparent;\n\t\tcolor: #000000;\n    cursor: pointer;\n    list-style: none;\n    display: inline-block;\n    padding: 0.5em 0.75em;\n\t}\n\t\n  .svelte-tabs__tab:focus {\n    outline: thin dotted;\n  }\n\n\t.svelte-tabs__selected {\n\t\tborder-bottom: 2px solid #4F81E5;\n    color: #4F81E5;\n\t}\n</style>\n\n<li\n  bind:this={tabEl}\n  role=\"tab\"\n  id={tab.id}\n  aria-controls={$controls[tab.id]}\n  aria-selected={isSelected}\n  tabindex=\"{isSelected ? 0 : -1}\"\n  class:svelte-tabs__selected={isSelected}\n  class=\"svelte-tabs__tab\"\n  on:click={() => selectTab(tab)}>\n\t<slot></slot>\n</li>\n",
    "<style>\n\t.svelte-tabs__tab-list {\n    border-bottom: 1px solid #CCCCCC;\n    margin: 0;\n    padding: 0;\n\t}\n</style>\n\n<ul role=\"tablist\" class=\"svelte-tabs__tab-list\">\n  <slot></slot>\n</ul>\n",
    "<script>\n  import { getContext } from 'svelte';\n\n  import getId from './id';\n  import { TABS } from './Tabs.svelte';\n\n  const panel = {\n    id: getId()\n  };\n  const { registerPanel, selectedPanel, labeledBy } = getContext(TABS);\n\n  registerPanel(panel);\n</script>\n\n<style>\n  .svelte-tabs__tab-panel {\n    margin-top: 0.5em;\n  }\n</style>\n\n<div \n  id={panel.id}\n  aria-labelledby={$labeledBy[panel.id]}\n  class=\"svelte-tabs__tab-panel\"\n  role=\"tabpanel\">\n  {#if $selectedPanel === panel}\n    <slot></slot>\n  {/if}\n</div>\n",
    "<script>\n\timport { createEventDispatcher } from 'svelte';\n\n  export let emoji;\n  \n  const dispatch = createEventDispatcher();\n\n  function onClick() {\n    dispatch('emojiclick', emoji.emoji);\n  }\n\n  function onMouseOver() {\n    dispatch('emojihover', emoji);\n  }\n\n  function onMouseOut() {\n    dispatch('emojihover', null);\n  }\n</script>\n\n<style>\n  button {\n    border: none;\n    background: transparent;\n    cursor: pointer;\n    font-size: 1.3em;\n    width: 1.5em;\n    height: 1.5em;\n    padding: 0;\n    margin: 0;\n  }\n\n  button:hover {\n    background: #E8F4F9;\n    border-radius: 5px;\n  }\n</style>\n\n<button on:mouseover={onMouseOver} on:mouseout={onMouseOut} on:click={onClick}>{emoji.emoji}</button>"
  ],
  "names": [],
  "mappings": "AA4FE,oBAAoB,eAAC,CAAC,AACpB,UAAU,CAAE,OAAO,CACnB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,aAAa,CAAE,GAAG,CAClB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,CAAC,CAAC,KAAK,CACf,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,AACrC,CAAC,AAED,6BAA6B,eAAC,CAAC,AAC7B,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,gCAAgC,eAAC,CAAC,AAChC,OAAO,CAAE,MAAM,AACjB,CAAC,AAEO,sEAAsE,AAAE,CAAC,AAC/E,OAAO,CAAE,IAAI,AACf,CAAC,AAEO,iEAAiE,AAAE,CAAC,AAC1E,SAAS,CAAE,CAAC,AACd,CAAC;AC3FD,UAAU,cAAC,CAAC,AACV,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,GAAG,CACX,QAAQ,CAAE,OAAO,CACjB,OAAO,CAAE,YAAY,AACvB,CAAC;ACxBD,kCAAkC,eAAC,CAAC,AAClC,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CAC7B,OAAO,CAAE,MAAM,CACf,SAAS,CAAE,KAAK,CAChB,WAAW,CAAE,IAAI,CACjB,MAAM,CAAE,GAAG,CACX,WAAW,CAAE,GAAG,CAChB,UAAU,CAAE,MAAM,AACpB,CAAC;ACLD,EAAE,cAAC,CAAC,AACF,MAAM,CAAE,CAAC,CACT,SAAS,CAAE,KAAK,CAChB,KAAK,CAAE,OAAO,AAChB,CAAC,AAED,gCAAgC,cAAC,CAAC,AAChC,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,MAAM,AAClB,CAAC;ACQF,iBAAiB,eAAC,CAAC,AAClB,MAAM,CAAE,IAAI,CACZ,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,WAAW,CACpC,KAAK,CAAE,OAAO,CACZ,MAAM,CAAE,OAAO,CACf,UAAU,CAAE,IAAI,CAChB,OAAO,CAAE,YAAY,CACrB,OAAO,CAAE,KAAK,CAAC,MAAM,AACxB,CAAC,AAEA,gCAAiB,MAAM,AAAC,CAAC,AACvB,OAAO,CAAE,IAAI,CAAC,MAAM,AACtB,CAAC,AAEF,sBAAsB,eAAC,CAAC,AACvB,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CAC9B,KAAK,CAAE,OAAO,AACjB,CAAC;ACzCD,sBAAsB,eAAC,CAAC,AACrB,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CAChC,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,AACb,CAAC;ACUA,uBAAuB,cAAC,CAAC,AACvB,UAAU,CAAE,KAAK,AACnB,CAAC;ACID,MAAM,eAAC,CAAC,AACN,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,WAAW,CACvB,MAAM,CAAE,OAAO,CACf,SAAS,CAAE,KAAK,CAChB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,CAAC,AACX,CAAC,AAED,qBAAM,MAAM,AAAC,CAAC,AACZ,UAAU,CAAE,OAAO,CACnB,aAAa,CAAE,GAAG,AACpB,CAAC"
}